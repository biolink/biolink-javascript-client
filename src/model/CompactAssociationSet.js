/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.CompactAssociationSet = factory(root.BioLinkApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CompactAssociationSet model module.
   * @module model/CompactAssociationSet
   * @version 0.1
   */

  /**
   * Constructs a new <code>CompactAssociationSet</code>.
   * @alias module:model/CompactAssociationSet
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>CompactAssociationSet</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CompactAssociationSet} obj Optional instance to populate.
   * @return {module:model/CompactAssociationSet} The populated <code>CompactAssociationSet</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('objects')) {
        obj['objects'] = ApiClient.convertToType(data['objects'], ['String']);
      }
      if (data.hasOwnProperty('relation')) {
        obj['relation'] = ApiClient.convertToType(data['relation'], 'String');
      }
      if (data.hasOwnProperty('subject')) {
        obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
      }
    }
    return obj;
  }

  /**
   * List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)
   * @member {Array.<String>} objects
   */
  exports.prototype['objects'] = undefined;
  /**
   * Relationship type connecting subject and object list
   * @member {String} relation
   */
  exports.prototype['relation'] = undefined;
  /**
   * Subject of association (what it is about), e.g. MGI:1201606
   * @member {String} subject
   */
  exports.prototype['subject'] = undefined;



  return exports;
}));


