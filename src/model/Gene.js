/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Association', 'model/BioObject', 'model/Chromosome', 'model/NamedObject', 'model/SequenceFeature', 'model/SummaryPropertyValue', 'model/Taxon', 'model/Transcript'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Association'), require('./BioObject'), require('./Chromosome'), require('./NamedObject'), require('./SequenceFeature'), require('./SummaryPropertyValue'), require('./Taxon'), require('./Transcript'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.Gene = factory(root.BioLinkApi.ApiClient, root.BioLinkApi.Association, root.BioLinkApi.BioObject, root.BioLinkApi.Chromosome, root.BioLinkApi.NamedObject, root.BioLinkApi.SequenceFeature, root.BioLinkApi.SummaryPropertyValue, root.BioLinkApi.Taxon, root.BioLinkApi.Transcript);
  }
}(this, function(ApiClient, Association, BioObject, Chromosome, NamedObject, SequenceFeature, SummaryPropertyValue, Taxon, Transcript) {
  'use strict';




  /**
   * The Gene model module.
   * @module model/Gene
   * @version 0.1
   */

  /**
   * Constructs a new <code>Gene</code>.
   * @alias module:model/Gene
   * @class
   * @implements module:model/BioObject
   */
  var exports = function() {
    var _this = this;

    BioObject.call(_this);
















  };

  /**
   * Constructs a <code>Gene</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Gene} obj Optional instance to populate.
   * @return {module:model/Gene} The populated <code>Gene</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      BioObject.constructFromObject(data, obj);
      if (data.hasOwnProperty('chromosome')) {
        obj['chromosome'] = Chromosome.constructFromObject(data['chromosome']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('disease_associations')) {
        obj['disease_associations'] = ApiClient.convertToType(data['disease_associations'], [Association]);
      }
      if (data.hasOwnProperty('families')) {
        obj['families'] = ApiClient.convertToType(data['families'], [NamedObject]);
      }
      if (data.hasOwnProperty('full_name')) {
        obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
      }
      if (data.hasOwnProperty('function_associations')) {
        obj['function_associations'] = ApiClient.convertToType(data['function_associations'], [Association]);
      }
      if (data.hasOwnProperty('genotype_associations')) {
        obj['genotype_associations'] = ApiClient.convertToType(data['genotype_associations'], [Association]);
      }
      if (data.hasOwnProperty('homology_associations')) {
        obj['homology_associations'] = ApiClient.convertToType(data['homology_associations'], [Association]);
      }
      if (data.hasOwnProperty('interaction_associations')) {
        obj['interaction_associations'] = ApiClient.convertToType(data['interaction_associations'], [Association]);
      }
      if (data.hasOwnProperty('literature_associations')) {
        obj['literature_associations'] = ApiClient.convertToType(data['literature_associations'], [Association]);
      }
      if (data.hasOwnProperty('pathway_associations')) {
        obj['pathway_associations'] = ApiClient.convertToType(data['pathway_associations'], [Association]);
      }
      if (data.hasOwnProperty('phenotype_associations')) {
        obj['phenotype_associations'] = ApiClient.convertToType(data['phenotype_associations'], [Association]);
      }
      if (data.hasOwnProperty('sequence_features')) {
        obj['sequence_features'] = ApiClient.convertToType(data['sequence_features'], [SequenceFeature]);
      }
      if (data.hasOwnProperty('summaries')) {
        obj['summaries'] = ApiClient.convertToType(data['summaries'], [SummaryPropertyValue]);
      }
      if (data.hasOwnProperty('systematic_name')) {
        obj['systematic_name'] = ApiClient.convertToType(data['systematic_name'], 'String');
      }
      if (data.hasOwnProperty('transcripts')) {
        obj['transcripts'] = ApiClient.convertToType(data['transcripts'], [Transcript]);
      }
    }
    return obj;
  }

  /**
   * chromosome on which this gene is located. This may be redundant with information in sequence_feature objects but is included here for convenience
   * @member {module:model/Chromosome} chromosome
   */
  exports.prototype['chromosome'] = undefined;
  /**
   * full text description
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * diseases associated with alterations of gene
   * @member {Array.<module:model/Association>} disease_associations
   */
  exports.prototype['disease_associations'] = undefined;
  /**
   * Families, superfamilies etc to which these gene belongs
   * @member {Array.<module:model/NamedObject>} families
   */
  exports.prototype['families'] = undefined;
  /**
   * full name, e.g. Synaptosome Associated Protein 29
   * @member {String} full_name
   */
  exports.prototype['full_name'] = undefined;
  /**
   * GO assocations for wild type gene
   * @member {Array.<module:model/Association>} function_associations
   */
  exports.prototype['function_associations'] = undefined;
  /**
   * associations to genotypes in which this gene is altered
   * @member {Array.<module:model/Association>} genotype_associations
   */
  exports.prototype['genotype_associations'] = undefined;
  /**
   * orthology and paralogy assocations for this gene
   * @member {Array.<module:model/Association>} homology_associations
   */
  exports.prototype['homology_associations'] = undefined;
  /**
   * associations to genes that interact (may be physical or genetic)
   * @member {Array.<module:model/Association>} interaction_associations
   */
  exports.prototype['interaction_associations'] = undefined;
  /**
   * publications for this gene
   * @member {Array.<module:model/Association>} literature_associations
   */
  exports.prototype['literature_associations'] = undefined;
  /**
   * Assocations to pathways in which this gene is involved, including LEGO models
   * @member {Array.<module:model/Association>} pathway_associations
   */
  exports.prototype['pathway_associations'] = undefined;
  /**
   * phenotypes associated with alterations of gene
   * @member {Array.<module:model/Association>} phenotype_associations
   */
  exports.prototype['phenotype_associations'] = undefined;
  /**
   * Sequence feature representing particular instance on a genome
   * @member {Array.<module:model/SequenceFeature>} sequence_features
   */
  exports.prototype['sequence_features'] = undefined;
  /**
   * Attributed textual summaries
   * @member {Array.<module:model/SummaryPropertyValue>} summaries
   */
  exports.prototype['summaries'] = undefined;
  /**
   * E.g. SPBC428.08c for clr4 in PomBase
   * @member {String} systematic_name
   */
  exports.prototype['systematic_name'] = undefined;
  /**
   * All transcripts belonging to this gene
   * @member {Array.<module:model/Transcript>} transcripts
   */
  exports.prototype['transcripts'] = undefined;

  // Implement BioObject interface:
  /**
   * @member {Array.<String>} categories
   */
exports.prototype['categories'] = undefined;

  /**
   * ID or CURIE e.g. MGI:1201606
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * RDFS Label
   * @member {String} label
   */
exports.prototype['label'] = undefined;

  /**
   * Taxon to which the object belongs
   * @member {module:model/Taxon} taxon
   */
exports.prototype['taxon'] = undefined;

  /**
   * Database cross-references. These are usually CURIEs, but may also be URLs. E.g. ENSEMBL:ENSG00000099940 
   * @member {Array.<String>} xrefs
   */
exports.prototype['xrefs'] = undefined;



  return exports;
}));


