/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/APageOfResults', 'model/VariantSet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./APageOfResults'), require('./VariantSet'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.PageOfVariantSets = factory(root.BioLinkApi.ApiClient, root.BioLinkApi.APageOfResults, root.BioLinkApi.VariantSet);
  }
}(this, function(ApiClient, APageOfResults, VariantSet) {
  'use strict';




  /**
   * The PageOfVariantSets model module.
   * @module model/PageOfVariantSets
   * @version 0.1
   */

  /**
   * Constructs a new <code>PageOfVariantSets</code>.
   * @alias module:model/PageOfVariantSets
   * @class
   * @implements module:model/APageOfResults
   */
  var exports = function() {
    var _this = this;

    APageOfResults.call(_this);

  };

  /**
   * Constructs a <code>PageOfVariantSets</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PageOfVariantSets} obj Optional instance to populate.
   * @return {module:model/PageOfVariantSets} The populated <code>PageOfVariantSets</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      APageOfResults.constructFromObject(data, obj);
      if (data.hasOwnProperty('items')) {
        obj['items'] = ApiClient.convertToType(data['items'], [VariantSet]);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:model/VariantSet>} items
   */
  exports.prototype['items'] = undefined;

  // Implement APageOfResults interface:
  /**
   * Number of items per page of results
   * @member {Integer} per_page
   */
exports.prototype['per_page'] = undefined;

  /**
   * Total number of results
   * @member {Integer} total
   */
exports.prototype['total'] = undefined;

  /**
   * Number of this page of results
   * @member {Integer} page
   */
exports.prototype['page'] = undefined;

  /**
   * Total number of pages of results
   * @member {Integer} pages
   */
exports.prototype['pages'] = undefined;



  return exports;
}));


