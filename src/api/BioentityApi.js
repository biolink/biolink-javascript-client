/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Allele', 'model/Association', 'model/AssociationResults', 'model/Gene', 'model/BioObject', 'model/Genotype', 'model/NamedObject', 'model/Substance'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Allele'), require('../model/Association'), require('../model/AssociationResults'), require('../model/Gene'), require('../model/BioObject'), require('../model/Genotype'), require('../model/NamedObject'), require('../model/Substance'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.BioentityApi = factory(root.BioLinkApi.ApiClient, root.BioLinkApi.Allele, root.BioLinkApi.Association, root.BioLinkApi.AssociationResults, root.BioLinkApi.Gene, root.BioLinkApi.BioObject, root.BioLinkApi.Genotype, root.BioLinkApi.NamedObject, root.BioLinkApi.Substance);
  }
}(this, function(ApiClient, Allele, Association, AssociationResults, Gene, BioObject, Genotype, NamedObject, Substance) {
  'use strict';

  /**
   * Bioentity service.
   * @module api/BioentityApi
   * @version 0.1
   */

  /**
   * Constructs a new BioentityApi. 
   * @alias module:api/BioentityApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAlleleObject operation.
     * @callback module:api/BioentityApi~getAlleleObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Allele>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns allele object
     * This is a composition of multiple smaller operations, including fetching allele metadata, plus allele associations  TODO - should allele be subsumed into variant?
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getAlleleObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Allele>}
     */
    this.getAlleleObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getAlleleObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Allele];

      return this.apiClient.callApi(
        '/bioentity/allele/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnatomyGeneAssociations operation.
     * @callback module:api/BioentityApi~getAnatomyGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations between anatomical entity and genes
     * Typically encompasses genes expressed in a particular location.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getAnatomyGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getAnatomyGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getAnatomyGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/anatomy/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnatomyObject operation.
     * @callback module:api/BioentityApi~getAnatomyObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns anatomical entity
     * Anatomical entities span ranges from the subcellular (e.g. nucleus) through cells to tissues, organs and organ systems.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getAnatomyObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAnatomyObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getAnatomyObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/anatomy/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnatomyPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getAnatomyPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations between anatomical entity and phenotypes
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getAnatomyPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getAnatomyPhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getAnatomyPhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/anatomy/{id}/phenotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseAnatomyAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseAnatomyAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns anatomical locations associated with a disease
     * For example, neurodegeneratibe disease located in nervous system. For cancer, this may include both site of original and end location.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseAnatomyAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getDiseaseAnatomyAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseAnatomyAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/anatomy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseFunctionAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseFunctionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns biological functions associated with a disease
     * This may come from a combination of asserted knowledge (e.g. Fanconi Anemia affects DNA repair) or from data-driven approach (cf Translator)  Results are typically represented as GO classes
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseFunctionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getDiseaseFunctionAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseFunctionAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/function/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseGeneAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getDiseaseGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseModelAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations to models of the disease
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getDiseaseModelAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseModelAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/models/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseModelTaxonAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseModelTaxonAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Same as &#x60;/disease/&lt;id&gt;/models&#x60; but constrain models by taxon
     * @param {String} taxon CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:6239 (C elegans).   Higher level taxa may be used
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseModelTaxonAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getDiseaseModelTaxonAssociations = function(taxon, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taxon' is set
      if (taxon == undefined || taxon == null) {
        throw "Missing the required parameter 'taxon' when calling getDiseaseModelTaxonAssociations";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseModelTaxonAssociations";
      }


      var pathParams = {
        'taxon': taxon,
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/models/{taxon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseObject operation.
     * @callback module:api/BioentityApi~getDiseaseObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns disease object
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDiseaseObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/disease/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseasePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getDiseasePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with disease
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseasePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getDiseasePhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseasePhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/phenotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseSubstanceAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseSubstanceAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param {String} id CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseSubstanceAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDiseaseSubstanceAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseSubstanceAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/disease/{id}/substance/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseSubstanceAssociations_0 operation.
     * @callback module:api/BioentityApi~getDiseaseSubstanceAssociations_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getDiseaseSubstanceAssociations_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDiseaseSubstanceAssociations_0 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getDiseaseSubstanceAssociations_0";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/treats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentObject operation.
     * @callback module:api/BioentityApi~getEnvironmentObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns environment entity
     * TODO consider renaming exposure
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getEnvironmentObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEnvironmentObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getEnvironmentObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/environment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getEnvironmentPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns list of associations
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getEnvironmentPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getEnvironmentPhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getEnvironmentPhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/environment/{id}/phenotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneExpressionAssociations operation.
     * @callback module:api/BioentityApi~getGeneExpressionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns expression events for a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGeneExpressionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGeneExpressionAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGeneExpressionAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/gene/{id}/expressed/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneFunctionAssociations operation.
     * @callback module:api/BioentityApi~getGeneFunctionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns function associations for a gene
     * Note: currently this is implemented as a query to the GO solr instance. A smaller set of identifiers may be supported:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  - MGI e.g. MGI:1342287  - Use UniProt for human (TODO: map this)
     * @param {String} id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {module:model/String} opts.type P, O or LDO (paralog, ortholog or least-diverged).
     * @param {String} opts.homologTaxon Taxon CURIE of homolog, e.g. NCBITaxon:9606. Can be intermediate note, includes inferred by default
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGeneFunctionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGeneFunctionAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGeneFunctionAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'type': opts['type'],
        'homolog_taxon': opts['homologTaxon'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/gene/{id}/function/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneHomologAssociations operation.
     * @callback module:api/BioentityApi~getGeneHomologAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns homologs for a gene
     * @param {String} id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {module:model/String} opts.type P, O or LDO (paralog, ortholog or least-diverged).
     * @param {String} opts.homologTaxon Taxon CURIE of homolog, e.g. NCBITaxon:9606. Can be intermediate note, includes inferred by default
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGeneHomologAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGeneHomologAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGeneHomologAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'type': opts['type'],
        'homolog_taxon': opts['homologTaxon'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/gene/{id}/homologs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneInteractions operation.
     * @callback module:api/BioentityApi~getGeneInteractionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns interactions for a gene
     * @param {String} id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGeneInteractionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGeneInteractions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGeneInteractions";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/gene/{id}/interactions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneObject operation.
     * @callback module:api/BioentityApi~getGeneObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gene>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns gene object
     * @param {String} id id, e.g. NCBIGene:84570
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGeneObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Gene>}
     */
    this.getGeneObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGeneObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Gene];

      return this.apiClient.callApi(
        '/bioentity/gene/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGenePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getGenePhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenePhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/gene/{id}/phenotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenePublicationList operation.
     * @callback module:api/BioentityApi~getGenePublicationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns expression events for a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenePublicationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGenePublicationList = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenePublicationList";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/gene/{id}/pubs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneproductObject operation.
     * @callback module:api/BioentityApi~getGeneproductObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns gene product object
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGeneproductObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getGeneproductObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGeneproductObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/geneproduct/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenericAssociations operation.
     * @callback module:api/BioentityApi~getGenericAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations for an entity regardless of the type
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenericAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGenericAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenericAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/{id}/associations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenericObject operation.
     * @callback module:api/BioentityApi~getGenericObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BioObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns object of any type
     * @param {String} id id, e.g. NCBIGene:84570
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenericObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/BioObject>}
     */
    this.getGenericObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenericObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BioObject];

      return this.apiClient.callApi(
        '/bioentity/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (if non-human will return models)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenotypeDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGenotypeDiseaseAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenotypeDiseaseAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/diseases/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeGeneAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenotypeGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGenotypeGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenotypeGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes-genotype associations
     * Genotypes may be related to one another according to the GENO model
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenotypeGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGenotypeGenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenotypeGenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/genotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeObject operation.
     * @callback module:api/BioentityApi~getGenotypeObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Genotype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotype object
     * The genotype object will have the following association sets populated:   * gene  * phenotype  * disease
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenotypeObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Genotype>}
     */
    this.getGenotypeObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenotypeObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Genotype];

      return this.apiClient.callApi(
        '/bioentity/genotype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGenotypePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGenotypePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getGenotypePhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGenotypePhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/phenotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGotermGeneAssociations operation.
     * @callback module:api/BioentityApi~getGotermGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associated phenotypes
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGotermGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getGotermGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGotermGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/goterm/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGotermObject operation.
     * @callback module:api/BioentityApi~getGotermObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns GO class object
     * @param {String} id GO class CURIE identifier, e.g GO:0016301 (kinase activity)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGotermObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getGotermObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGotermObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/goterm/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGotermPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGotermPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associated phenotypes
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getGotermPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getGotermPhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGotermPhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/goterm/{id}/phenotype/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiteratureDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getLiteratureDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between a lit entity and a disease
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getLiteratureDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getLiteratureDiseaseAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getLiteratureDiseaseAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/literature/{id}/diseases/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiteratureGeneAssociations operation.
     * @callback module:api/BioentityApi~getLiteratureGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between a lit entity and a gene
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getLiteratureGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getLiteratureGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getLiteratureGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/literature/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiteratureGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getLiteratureGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between a lit entity and a genotype
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getLiteratureGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getLiteratureGenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getLiteratureGenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/literature/{id}/genotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParentObject operation.
     * @callback module:api/BioentityApi~getParentObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns individual
     * Individuals may typically encompass patients, but can be individuals of any species
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getParentObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getParentObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getParentObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/individual/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParentObject_0 operation.
     * @callback module:api/BioentityApi~getParentObject_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns investigation object
     * Investigations encompass clinical trials, molecular biology experiments or any kind of study
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getParentObject_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getParentObject_0 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getParentObject_0";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/investigation/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathwayGeneAssociations operation.
     * @callback module:api/BioentityApi~getPathwayGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns list of genes associated with a pathway
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPathwayGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getPathwayGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPathwayGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/pathway/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathwayObject operation.
     * @callback module:api/BioentityApi~getPathwayObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns pathway object
     * @param {String} id CURIE any pathway element. May be a GO ID or a pathway database ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPathwayObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPathwayObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPathwayObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/pathway/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathwayParticipantAssociations operation.
     * @callback module:api/BioentityApi~getPathwayParticipantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations to participants (molecules, etc) for a pathway
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPathwayParticipantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getPathwayParticipantAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPathwayParticipantAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/pathway/{id}/participants/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeAnatomyAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeAnatomyAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NamedObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns anatomical entities associated with a phenotype
     * Example IDs:   * ZP:0004204   * MP:0008521 abnormal Bowman membrane  For example, *abnormal limb development* will map to *limb*
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPhenotypeAnatomyAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/NamedObject>}
     */
    this.getPhenotypeAnatomyAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPhenotypeAnatomyAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NamedObject];

      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/anatomy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeFunctionAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeFunctionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns biological functions associated with a Phenotype
     * This may come from a combination of asserted knowledge (e.g. abnormal levels of metabolite to corresponding GO activity) or from data-driven approach (cf Translator)  Results are typically represented as GO classes
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPhenotypeFunctionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getPhenotypeFunctionAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPhenotypeFunctionAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/function/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeGeneAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns gene ids for all genes for a particular phenotype in a taxon
     * For example, + NCBITaxon:10090 (mouse)
     * @param {String} taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus)
     * @param {String} id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPhenotypeGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPhenotypeGeneAssociations = function(taxid, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taxid' is set
      if (taxid == undefined || taxid == null) {
        throw "Missing the required parameter 'taxid' when calling getPhenotypeGeneAssociations";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPhenotypeGeneAssociations";
      }


      var pathParams = {
        'taxid': taxid,
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/gene/{taxid}/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeGeneAssociations_0 operation.
     * @callback module:api/BioentityApi~getPhenotypeGeneAssociations_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associated phenotypes
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPhenotypeGeneAssociations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getPhenotypeGeneAssociations_0 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPhenotypeGeneAssociations_0";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeObject operation.
     * @callback module:api/BioentityApi~getPhenotypeObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns phenotype class object
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPhenotypeObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPhenotypeObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPhenotypeObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associated phenotypes
     * Includes phenologs, as well as equivalent phenotypes in other species
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPhenotypePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getPhenotypePhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPhenotypePhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/phenotype/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPubObject operation.
     * @callback module:api/BioentityApi~getPubObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns publication object
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getPubObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPubObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getPubObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/literature/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSequenceFeatureObject operation.
     * @callback module:api/BioentityApi~getSequenceFeatureObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns seqfeature
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSequenceFeatureObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSequenceFeatureObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSequenceFeatureObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/sequence_feature/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceExposures operation.
     * @callback module:api/BioentityApi~getSubstanceExposuresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations between a substance and related exposures
     * E.g. between pesticide and occupational exposure class
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceExposuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getSubstanceExposures = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceExposures";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/exposures/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceInteractions operation.
     * @callback module:api/BioentityApi~getSubstanceInteractionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations between given drug and interactions
     * Interactions can encompass drugs or environments
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceInteractionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getSubstanceInteractions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceInteractions";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/interactions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceObject operation.
     * @callback module:api/BioentityApi~getSubstanceObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Substance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns substance entity
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Substance>}
     */
    this.getSubstanceObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Substance];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceParticipantInAssociations operation.
     * @callback module:api/BioentityApi~getSubstanceParticipantInAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between an activity and process and the specified substance
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceParticipantInAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getSubstanceParticipantInAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceParticipantInAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/participant_in/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceRelationships operation.
     * @callback module:api/BioentityApi~getSubstanceRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations between a substance and other substances
     * E.g. metabolite-of, tautomer-of, parent-of, ...
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getSubstanceRelationships = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceRelationships";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/substances/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceRoleAssociations operation.
     * @callback module:api/BioentityApi~getSubstanceRoleAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between given drug and roles
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceRoleAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getSubstanceRoleAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceRoleAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceTargetAssociations operation.
     * @callback module:api/BioentityApi~getSubstanceTargetAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns associations between given drug and targets
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getSubstanceTargetAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getSubstanceTargetAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSubstanceTargetAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/bioentity/substance/{id}/targets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGeneAssociations operation.
     * @callback module:api/BioentityApi~getVariantGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getVariantGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getVariantGeneAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getVariantGeneAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/variant/{id}/genes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getVariantGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getVariantGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getVariantGenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getVariantGenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/variant/{id}/genotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantObject operation.
     * @callback module:api/BioentityApi~getVariantObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Returns sequence variant entity
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getVariantObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getVariantObject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getVariantObject";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentity/variant/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getVariantPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (default to true)
     * @param {Integer} opts.rows number of rows (default to 20)
     * @param {Boolean} opts.excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} opts.unselectEvidence If set, excludes evidence objects in response
     * @param {Boolean} opts.useCompactAssociations If true, returns results in compact associations format
     * @param {module:api/BioentityApi~getVariantPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getVariantPhenotypeAssociations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getVariantPhenotypeAssociations";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fetch_objects': opts['fetchObjects'],
        'rows': opts['rows'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'unselect_evidence': opts['unselectEvidence'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentity/variant/{id}/phenotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
