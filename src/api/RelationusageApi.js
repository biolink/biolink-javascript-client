/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssociationResults'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssociationResults'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.RelationusageApi = factory(root.BioLinkApi.ApiClient, root.BioLinkApi.AssociationResults);
  }
}(this, function(ApiClient, AssociationResults) {
  'use strict';

  /**
   * Relationusage service.
   * @module api/RelationusageApi
   * @version 0.1
   */

  /**
   * Constructs a new RelationusageApi. 
   * @alias module:api/RelationusageApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRelationUsageBetweenResource operation.
     * @callback module:api/RelationusageApi~getRelationUsageBetweenResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All relations used plus count of associations
     * @param {String} objectCategory 
     * @param {String} subjectCategory 
     * @param {Object} opts Optional parameters
     * @param {String} opts.subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} opts.evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationusageApi~getRelationUsageBetweenResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getRelationUsageBetweenResource = function(objectCategory, subjectCategory, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectCategory' is set
      if (objectCategory == undefined || objectCategory == null) {
        throw "Missing the required parameter 'objectCategory' when calling getRelationUsageBetweenResource";
      }

      // verify the required parameter 'subjectCategory' is set
      if (subjectCategory == undefined || subjectCategory == null) {
        throw "Missing the required parameter 'subjectCategory' when calling getRelationUsageBetweenResource";
      }


      var pathParams = {
        'object_category': objectCategory,
        'subject_category': subjectCategory
      };
      var queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/relation/usage/between/{subject_category}/{object_category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsagePivotLabelResource operation.
     * @callback module:api/RelationusageApi~getRelationUsagePivotLabelResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relation usage count for all subj x obj category combinations, showing label
     * @param {Object} opts Optional parameters
     * @param {String} opts.subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} opts.evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationusageApi~getRelationUsagePivotLabelResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getRelationUsagePivotLabelResource = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/relation/usage/pivot/label', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsagePivotResource operation.
     * @callback module:api/RelationusageApi~getRelationUsagePivotResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relation usage count for all subj x obj category combinations
     * @param {Object} opts Optional parameters
     * @param {String} opts.subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} opts.evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationusageApi~getRelationUsagePivotResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getRelationUsagePivotResource = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/relation/usage/pivot/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsageResource operation.
     * @callback module:api/RelationusageApi~getRelationUsageResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All relations used plus count of associations
     * @param {Object} opts Optional parameters
     * @param {String} opts.subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} opts.evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationusageApi~getRelationUsageResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getRelationUsageResource = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/relation/usage/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
