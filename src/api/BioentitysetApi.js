/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssociationResults'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssociationResults'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.BioentitysetApi = factory(root.BioLinkApi.ApiClient, root.BioLinkApi.AssociationResults);
  }
}(this, function(ApiClient, AssociationResults) {
  'use strict';

  /**
   * Bioentityset service.
   * @module api/BioentitysetApi
   * @version 0.1
   */

  /**
   * Constructs a new BioentitysetApi. 
   * @alias module:api/BioentitysetApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getEntitySetAssociations operation.
     * @callback module:api/BioentitysetApi~getEntitySetAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns compact associations for a given input set
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
     * @param {String} opts.objectCategory E.g. phenotype, function
     * @param {Array.<String>} opts.subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} opts.background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
     * @param {module:api/BioentitysetApi~getEntitySetAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getEntitySetAssociations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'object_slim': opts['objectSlim'],
        'object_category': opts['objectCategory'],
        'subject': this.apiClient.buildCollectionParam(opts['subject'], 'multi'),
        'background': this.apiClient.buildCollectionParam(opts['background'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentityset/associations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetGraphResource operation.
     * @callback module:api/BioentitysetApi~getEntitySetGraphResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Graph object spanning all entities
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
     * @param {String} opts.objectCategory E.g. phenotype, function
     * @param {Array.<String>} opts.subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} opts.background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
     * @param {module:api/BioentitysetApi~getEntitySetGraphResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEntitySetGraphResource = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'object_slim': opts['objectSlim'],
        'object_category': opts['objectCategory'],
        'subject': this.apiClient.buildCollectionParam(opts['subject'], 'multi'),
        'background': this.apiClient.buildCollectionParam(opts['background'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentityset/graph/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetHomologsDeprecated operation.
     * @callback module:api/BioentitysetApi~getEntitySetHomologsDeprecatedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns homology associations for a given input set of genes
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
     * @param {String} opts.objectCategory E.g. phenotype, function
     * @param {Array.<String>} opts.subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} opts.background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
     * @param {module:api/BioentitysetApi~getEntitySetHomologsDeprecatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/AssociationResults>}
     */
    this.getEntitySetHomologsDeprecated = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'object_slim': opts['objectSlim'],
        'object_category': opts['objectCategory'],
        'subject': this.apiClient.buildCollectionParam(opts['subject'], 'multi'),
        'background': this.apiClient.buildCollectionParam(opts['background'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssociationResults];

      return this.apiClient.callApi(
        '/bioentityset/DEPRECATEDhomologs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetOverRepresentationAnalysis operation.
     * @callback module:api/BioentitysetApi~getEntitySetOverRepresentationAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Over-representation analysis
     * @param {String} objectCategory CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease
     * @param {String} objectCategory2 E.g. phenotype, function
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
     * @param {Array.<String>} opts.subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} opts.background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
     * @param {module:api/BioentitysetApi~getEntitySetOverRepresentationAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEntitySetOverRepresentationAnalysis = function(objectCategory, objectCategory2, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectCategory' is set
      if (objectCategory == undefined || objectCategory == null) {
        throw "Missing the required parameter 'objectCategory' when calling getEntitySetOverRepresentationAnalysis";
      }

      // verify the required parameter 'objectCategory2' is set
      if (objectCategory2 == undefined || objectCategory2 == null) {
        throw "Missing the required parameter 'objectCategory2' when calling getEntitySetOverRepresentationAnalysis";
      }


      var pathParams = {
        'object_category': objectCategory
      };
      var queryParams = {
        'object_slim': opts['objectSlim'],
        'object_category': objectCategory2,
        'subject': this.apiClient.buildCollectionParam(opts['subject'], 'multi'),
        'background': this.apiClient.buildCollectionParam(opts['background'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentityset/ora/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetOverRepresentationAnalysis_0 operation.
     * @callback module:api/BioentitysetApi~getEntitySetOverRepresentationAnalysis_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TODO Over-representation analysis
     * @param {String} objectCategory CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease
     * @param {String} objectCategory2 E.g. phenotype, function
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
     * @param {Array.<String>} opts.subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} opts.background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
     * @param {module:api/BioentitysetApi~getEntitySetOverRepresentationAnalysis_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEntitySetOverRepresentationAnalysis_0 = function(objectCategory, objectCategory2, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectCategory' is set
      if (objectCategory == undefined || objectCategory == null) {
        throw "Missing the required parameter 'objectCategory' when calling getEntitySetOverRepresentationAnalysis_0";
      }

      // verify the required parameter 'objectCategory2' is set
      if (objectCategory2 == undefined || objectCategory2 == null) {
        throw "Missing the required parameter 'objectCategory2' when calling getEntitySetOverRepresentationAnalysis_0";
      }


      var pathParams = {
        'object_category': objectCategory
      };
      var queryParams = {
        'object_slim': opts['objectSlim'],
        'object_category': objectCategory2,
        'subject': this.apiClient.buildCollectionParam(opts['subject'], 'multi'),
        'background': this.apiClient.buildCollectionParam(opts['background'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentityset/ora/{object_category}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetSummary operation.
     * @callback module:api/BioentitysetApi~getEntitySetSummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summary statistics for objects associated
     * @param {Object} opts Optional parameters
     * @param {String} opts.objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
     * @param {String} opts.objectCategory E.g. phenotype, function
     * @param {Array.<String>} opts.subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} opts.background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
     * @param {module:api/BioentitysetApi~getEntitySetSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEntitySetSummary = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'object_slim': opts['objectSlim'],
        'object_category': opts['objectCategory'],
        'subject': this.apiClient.buildCollectionParam(opts['subject'], 'multi'),
        'background': this.apiClient.buildCollectionParam(opts['background'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bioentityset/descriptor/counts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
