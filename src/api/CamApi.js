/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Association'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Association'));
  } else {
    // Browser globals (root is window)
    if (!root.BioLinkApi) {
      root.BioLinkApi = {};
    }
    root.BioLinkApi.CamApi = factory(root.BioLinkApi.ApiClient, root.BioLinkApi.Association);
  }
}(this, function(ApiClient, Association) {
  'use strict';

  /**
   * Cam service.
   * @module api/CamApi
   * @version 0.1
   */

  /**
   * Constructs a new CamApi. 
   * @alias module:api/CamApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getActivityCollection operation.
     * @callback module:api/CamApi~getActivityCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of models
     * @param {Object} opts Optional parameters
     * @param {String} opts.contributor string to search for in contributor of model
     * @param {String} opts.title string to search for in title of model
     * @param {module:api/CamApi~getActivityCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getActivityCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contributor': opts['contributor'],
        'title': opts['title']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/activity/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstance operation.
     * @callback module:api/CamApi~getInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matches
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.contributor string to search for in contributor of model
     * @param {String} opts.title string to search for in title of model
     * @param {module:api/CamApi~getInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Association>}
     */
    this.getInstance = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getInstance";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'contributor': opts['contributor'],
        'title': opts['title']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Association];

      return this.apiClient.callApi(
        '/cam/instance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModel operation.
     * @callback module:api/CamApi~getModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a complete model
     * @param {String} id 
     * @param {module:api/CamApi~getModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModel = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getModel";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/model/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCollection operation.
     * @callback module:api/CamApi~getModelCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of ALL models
     * @param {module:api/CamApi~getModelCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModelCollection = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/model/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCollection_0 operation.
     * @callback module:api/CamApi~getModelCollection_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all properties used across all models
     * @param {Object} opts Optional parameters
     * @param {String} opts.contributor string to search for in contributor of model
     * @param {String} opts.title string to search for in title of model
     * @param {module:api/CamApi~getModelCollection_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModelCollection_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contributor': opts['contributor'],
        'title': opts['title']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/model/properties/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCollection_1 operation.
     * @callback module:api/CamApi~getModelCollection_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list property-values for all models
     * @param {Object} opts Optional parameters
     * @param {String} opts.contributor string to search for in contributor of model
     * @param {String} opts.title string to search for in title of model
     * @param {module:api/CamApi~getModelCollection_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModelCollection_1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contributor': opts['contributor'],
        'title': opts['title']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/model/property_values/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCollection_2 operation.
     * @callback module:api/CamApi~getModelCollection_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of models matching query
     * @param {Object} opts Optional parameters
     * @param {String} opts.contributor string to search for in contributor of model
     * @param {String} opts.title string to search for in title of model
     * @param {module:api/CamApi~getModelCollection_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModelCollection_2 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contributor': opts['contributor'],
        'title': opts['title']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/model/query/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelContibutors operation.
     * @callback module:api/CamApi~getModelContibutorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all instances
     * @param {module:api/CamApi~getModelContibutorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModelContibutors = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/instances/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelContibutors_0 operation.
     * @callback module:api/CamApi~getModelContibutors_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all contributors across all models
     * @param {module:api/CamApi~getModelContibutors_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getModelContibutors_0 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/model/contributors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhysicalInteraction operation.
     * @callback module:api/CamApi~getPhysicalInteractionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of models
     * @param {Object} opts Optional parameters
     * @param {String} opts.contributor string to search for in contributor of model
     * @param {String} opts.title string to search for in title of model
     * @param {module:api/CamApi~getPhysicalInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPhysicalInteraction = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contributor': opts['contributor'],
        'title': opts['title']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cam/physical_interaction/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
